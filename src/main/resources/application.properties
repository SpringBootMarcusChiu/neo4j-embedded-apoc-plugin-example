#org.neo4j.driver.uri=http://localhost:7474
#org.neo4j.driver.authentication.username=neo4j
#org.neo4j.driver.authentication.password=password

# causes error ClassNotFound org/neo4j/ogm/result/ResultRestModel
#spring.data.neo4j.uri=http://localhost:7474
#spring.data.neo4j.uri=neo4j://localhost
spring.data.neo4j.uri=bolt://localhost:7687
#spring.data.neo4j.username=neo4j
#spring.data.neo4j.password=password

#does not open a session when a request comes in
#SpringBoot defaults this to true, opens a read/write session for OGM
# which makes all transactions read/write, even on queries marked as read-only
# That can cause issues in a Neo4j cluster because writes are sent only to the leader in the cluster
#With this property set to false, recognizes read-only requests and can send to read replicas
#spring.data.neo4j.open-in-view=false

#logging.level.org.springframework.data.neo4j=DEBUG
#logging.level.org.neo4j.ogm.drivers.bolt.request.BoltRequest=DEBUG
#logging.level.org.neo4j.ogm.drivers.http.driver.HttpDriver=DEBUG

# AUTO INDEX
# Default Value
#spring.data.neo4j.auto-index=none
# Makes sure the Indices exists in database, otherwise throw error on app startup
#spring.data.neo4j.auto-index=validate
# Updates the indices based on the @Index(...)
#spring.data.neo4j.auto-index=update
# Drops all constraints and indexes on startup then builds indexes based on whatever
# is represented in OGM by @Index. Handy during development
#spring.data.neo4j.auto-index=assert
# dump DDL onto $PROJECT_ROOT/generated_indexes.cql
# no execution to target database
#spring.data.neo4j.auto-index=dump